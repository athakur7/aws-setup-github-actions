name: 'Cached dependencies'
description: 'Get the dependencies via npm & cache if not present then install'
inputs:
  caching:
    description: 'Whether to cache dpendencies or not'
    required: false
    default: 'true'
  project-path:
    description: 'Add project path for which caching is to be done'
    required: true
# outputs:
#   project-path-check:
#     description: 'Validate Project Path'
#     value: ${{ steps.validate.outputs.project-path-validity }}
runs:
  using: 'composite'
  steps:
    - name: Validate project path
      id: validate
      run: |
        if [ -d "${{ inputs.project-path }}" ]; then
          echo "::set-output name=project-path-validity::true"
        else
          echo "::set-output name=project-path-validity::false"
          echo "Error: Provided project-path '${{ inputs.project-path }}' is not valid or does not exist."
          echo "Present working directory (PWD): $(pwd)"
          exit 1
        fi
      shell: bash
    - name: Cache dependencies
      if: inputs.caching == 'true' 
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.project-path }}/node_modules
        key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true' || inputs.caching != 'true'
      run: npm ci
      shell: bash
      working-directory: ${{ inputs.project-path }}
